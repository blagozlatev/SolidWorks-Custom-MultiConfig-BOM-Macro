'Author: Blagovest Zlatev
Dim itemNumber As String
Dim partNames As New Collection
Dim partCount As New Collection
Dim partDescription As String
Dim Standard As Boolean
Dim Asm As Boolean
    
    
Private Sub Class_Initialize()
    itemNumber = ""
    partPath = ""
    partDescription = ""
    Standard = False
    Asm = False
End Sub
    
Sub SetStandardPart(cellText As String)
    If (cellText = "Yes") Or (cellText = "Äà") Then
        Standard = True
    Else
        Standard = False
    End If
End Sub
    
Function isStandard() As Boolean
    isStandard = Standard
End Function
    
Sub SetAsmPart(isAsm As Boolean)
    Asm = isAsm
End Sub
    
Function isAsm() As Boolean
    isAsm = Asm
End Function
    
Sub SetItemNumber(item As String)
    itemNumber = item
End Sub
    
Function GetItemNumber() As String
    GetItemNumber = itemNumber
    Exit Function
End Function
    
Sub AddPartNames(newPartName As String)
    If (partNames.Count = 0) Then
        partNames.Add (newPartName)
    ElseIf (partNames.item(partNames.Count) <> newPartName) Then
        partNames.Add newPartName
    End If
End Sub
    
Sub SetPartDescription(partDes As String)
        partDescription = partDes
End Sub
    
Function GetPartDescription() As String
    If partDescription <> "" Then
        GetPartDescription = partDescription
        Exit Function
    Else
        GetPartDescription = "No Part desc"
        Exit Function
    End If
End Function
    
Function GetNamesCount() As Integer
    GetNamesCount = partNames.Count
    Exit Function
End Function
    
Sub SetPartCount(pCount As Integer, asmConfigNumber As Integer, asmPartName As String)
    On Error Resume Next
        If (HasKey(partCount, CStr(asmConfigNumber) + asmPartName)) Then
            pCount = pCount + partCount.item(CStr(asmConfigNumber) + asmPartName)
            partCount.Remove (CStr(asmConfigNumber) + asmPartName)
            partCount.Add pCount, CStr(asmConfigNumber) + asmPartName
        Else
            partCount.Add pCount, CStr(asmConfigNumber) + asmPartName
        End If
    On Error GoTo 0
End Sub

Function HasKey(collectionObject As Collection, collectionKey As String) As Boolean
    Dim var As Variant
    On Error Resume Next
    var = collectionObject(collectionKey)
    HasKey = (Err.Number = 0)
    Err.Clear
End Function
        
Function GetPartCount()

End Function

Sub PrintInfoInDebug(configurationNames As Variant)
    Dim i As Integer
    Dim k As Integer
    
    Debug.Print "PART Item Number: " & itemNumber
    Debug.Print "DESCRIPTION: " & partDescription
    Debug.Print "IS STANDARD: " & Standard
    Debug.Print "IS ASSEMBLY: " & Asm
    For i = 1 To partNames.Count
        Debug.Print "PART " & itemNumber & " PartName: " & partNames.item(i)
    Next
    
    For i = 1 To partNames.Count
        For k = 0 To UBound(configurationNames)
            Debug.Print "PART " & itemNumber & " COUNT: " & partCount.item(CStr(k) + partNames(i)) & " with partname " & partNames(i) & " in configuration " & configurationNames(k)
        Next
    Next
End Sub
